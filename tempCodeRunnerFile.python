import os
import cv2
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
# Set the path to your dataset
dataset_path = '"C:\Users\RadhaKrishna\Downloads\Sign Language for Alphabets"'
labels = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ") + ["Unknown"]
num_classes = len(labels)
img_size = 64  # You can change this based on your model's input requirement

# Initialize lists to store images and labels
data = []
target_labels = []

# Load images and labels
for label in labels:
    label_path = os.path.join(dataset_path, label)
    if not os.path.exists(label_path):
        continue

    for img_name in os.listdir(label_path):
        img_path = os.path.join(label_path, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, (img_size, img_size))  # Resize all images to the same size
        data.append(img)
        target_labels.append(labels.index(label))

# Convert lists to numpy arrays
data = np.array(data).reshape(-1, img_size, img_size, 1)  # Add channel dimension for grayscale
data = data / 255.0  # Normalize images
target_labels = to_categorical(target_labels, num_classes)
# Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(data, target_labels, test_size=0.2, random_state=42)
train_datagen = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.2,
    horizontal_flip=True
)
train_datagen.fit(X_train)
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_size, img_size, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()
batch_size = 32
epochs = 10  # Adjust based on dataset size

history = model.fit(
    train_datagen.flow(X_train, y_train, batch_size=batch_size),
    epochs=epochs,
    validation_data=(X_test, y_test)
)
# Evaluate on test data
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.4f}")

# Plot training history
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
model.save('hand_gesture_model.h5')
print("Model saved as 'hand_gesture_model.h5'")
import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model('hand_gesture_model.h5')
labels = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ") + ["Unknown"]

# Start video capture
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Define ROI (adjust this based on your hand position in frame)
    roi = frame[100:400, 100:400]  # Example ROI coordinates
    
    # Preprocess the ROI
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    img = cv2.resize(gray, (img_size, img_size))  # Resize to the model's input size
    img = img / 255.0  # Normalize
    img = np.expand_dims(img, axis=(0, -1))  # Add batch and channel dimensions

    # Predict gesture
    predictions = model.predict(img)
    class_idx = np.argmax(predictions)
    predicted_class = labels[class_idx]

    # Display prediction on the frame
    cv2.putText(frame, f'Prediction: {predicted_class}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    
    # Display the ROI and the main frame
    cv2.imshow("ROI", roi)
    cv2.imshow("Hand Gesture Recognition", frame)

    # Break loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close windows
cap.release()
cv2.destroyAllWindows()
